from tqdm import tqdm
from itertools import permutations, combinations, product
from math import *

TEST = """
1=-0-2
12111
2=0=
21
2=01
111
20012
112
1=-1=
1-12
12
1=
122
"""

PROD = """
121=10120=1022=2=0
10==--=-=2
2=11
120221-1-
2002011
1-00-11=0
1==2=-200101===
2122=-10
1=1=2=-1
11--=-10-0-0
2=-210=
2-==1221011=021==-
2
1-2==212
1-2=0=12--0111010=0
1220-20=1=1
1211=1
10-22=-212--00
1=---021
1-010-21-2-
10-==00122-=0--
10=-
1=20=-=---1=1
1-0-0
2===11=12200=2
1===1
1002
10=-==-02
12---2-==-020122
11=-=2
1-==2-=--2
1-1112
210-212-=20220-1
1=-0111=0==
100=20==-
200==22-2=
2-
21-=1012=2=01=
1=-=0=0-01=0
1-2
1121==0=
2--21
212111=00=-1-=1=
10-021-
2=
2=0=12-
1-0--
2-0=21012==112=-1=
1222==01=100121=0-=
1011=01
12102-
10012=0-11021
1-=01-
12=010=12-0=02=11
1-22=2--1-
100=010-1
210
1-
22--011--1212101
11201
1=2=-122=---1
1===2122=-01=0=2
1011--0--=20
202-2-1=2
2=000=10=-0
110-=00-1211
2==0=--00-2===
110
2=-02-1220012-
1=21----=-=
1=1
12=--2=012-21
1=0020-1--=0-=
1==
11-01101221=-02
1=0201-2==0--01
1=120120-=1
1-121=====2-0=-
201=1=1101-=02==
1-00--0-
10-202
22-
1==1=-2==-0-110
1==21=1=20-1210=12
20112-1=0--0=
1=-=2021--0===21
1-==-2
1==120-0-
1=0111=21-00-0=2
1-110-=11-1021
22
1=1212=20=
212=1=-12---122
2=2
2220-1=2==022=--0=
2-02222
1--0=0-22=-1
120==2100
10==201121==2-1221-0
12210--==2--01022
211120-21202
22021011
21---0=2-10=22
1-22=-0
12201=-2121-=-1
11122-=202-
1-2---=
1-22=01=10-10
1-0=0=21211011-0-
2---
1==12100
112=1121
120--1
1-11=-2=-0
1--=02-02
2000-22==0221=2=
1=1-10-1-==100=1
202-011011
20=10=-0002=00=
2=1-2
220
11==-0=120--0-10=
1=112-22202=2
10=-0
1=1=2=0
2222--11---011-1
1=-1=2=1-2122--10-1
11021
101
11=2101222==
100112-2011
1=1=
2-021--
12211-1122=2-
2--2=-1=-
21012=2---2=2120=1
1-010-==--2
12=-22000-
2-===1-1
22=-=122=--1=
2-2=-0-021
"""

x = TEST
x = PROD

x = x.strip().split("\n")

# "So, because ten (in normal numbers) is two fives and no ones, in SNAFU it is written 20. Since eight (in normal numbers) is two fives minus two ones, it is written 2=."

# "You can do it the other direction, too. Say you have the SNAFU number 2=-01. That's 2 in the 625s place, = (double-minus) in the 125s place, - (minus) in the 25s place, 0 in the 5s place, and 1 in the 1s place. (2 times 625) plus (-2 times 125) plus (-1 times 25) plus (0 times 5) plus (1 times 1). That's 1250 plus -250 plus -25 plus 0 plus 1. 976!"


def toI(s):
    # convert s to base 5
    res = 0
    for i, c in enumerate(s[::-1]):
        if c == "-":
            # multiply by -1
            res -= 5 ** i
        elif c == "=":
            # multiply by -2
            res -= 2 * 5 ** i
        else:
            res += int(c) * 5 ** i
    return res


# samples
#  SNAFU  Decimal
# 1=-0-2     1747
#  12111      906
#   2=0=      198
#     21       11
#   2=01      201
#    111       31
#  20012     1257
#    112       32
#  1=-1=      353
#   1-12      107
#     12        7
#     1=        3
#    122       37


def toSnafu(n: int) -> str:
    if n == 0:
        return ""
    if n % 5 == 0:
        return toSnafu(n // 5) + "0"
    if n % 5 == 1:
        return toSnafu(n // 5) + "1"
    if n % 5 == 2:
        return toSnafu(n // 5) + "2"
    if n % 5 == 3:
        return toSnafu((n + 2) // 5) + "="
    if n % 5 == 4:
        return toSnafu((n + 1) // 5) + "-"


s = 0
for i in x:
    s += toI(i)

# convert s to base 5
print(s)
print(toSnafu(s))
